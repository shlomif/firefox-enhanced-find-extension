<?xml version="1.0"?>
<!-- ***** BEGIN LICENSE BLOCK *****
  -   Version: MPL 1.1/GPL 2.0/LGPL 2.1
  -
  - The contents of this file are subject to the Mozilla Public License Version
  - 1.1 (the "License"); you may not use this file except in compliance with
  - the License. You may obtain a copy of the License at
  - http://www.mozilla.org/MPL/
  -
  - Software distributed under the License is distributed on an "AS IS" basis,
  - WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
  - for the specific language governing rights and limitations under the
  - License.
  -
  - The Original Code is Smart Find.
  -
  - The Initial Developer of the Original Code is
  - Tomaz NolÃªto <tnoleto@gmail.com>.
  - Portions created by the Initial Developer are Copyright (C) 2008
  - the Initial Developer. All Rights Reserved.
  -
  - Contributor(s):
  -
  - Alternatively, the contents of this file may be used under the terms of
  - either the GNU General Public License Version 2 or later (the "GPL"), or
  - the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
  - in which case the provisions of the GPL or the LGPL are applicable instead
  - of those above. If you wish to allow use of your version of this file only
  - under the terms of either the GPL or the LGPL, and not to allow others to
  - use your version of this file under the terms of the MPL, indicate your
  - decision by deleting the provisions above and replace them with the notice
  - and other provisions required by the GPL or the LGPL. If you do not delete
  - the provisions above, a recipient may use your version of this file under
  - the terms of any one of the MPL, the GPL or the LGPL.
  -
  - ***** END LICENSE BLOCK ***** -->

<!DOCTYPE bindings [
<!ENTITY % findBarDTD SYSTEM "chrome://global/locale/findbar.dtd" >
%findBarDTD;
<!ENTITY % globalDTD SYSTEM "chrome://global/locale/global.dtd">
%globalDTD;
<!ENTITY % smartfindDTD SYSTEM "chrome://smartfind/locale/smartfind.dtd">
%smartfindDTD;
]>

<bindings id="smartfindBindings"
    xmlns="http://www.mozilla.org/xbl"
    xmlns:xul="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul"
    xmlns:xbl="http://www.mozilla.org/xbl">

    <binding id="smartfindbar"
        extends="chrome://global/content/bindings/findbar.xml#findbar">

        <resources>
            <stylesheet src="chrome://global/skin/findBar.css"/>
        </resources>

        <content hidden="true">
            <xul:hbox anonid="findbar-container" class="findbar-container" flex="1" align="center">
                <xul:toolbarbutton anonid="find-closebutton"
                    class="findbar-closebutton"
                    tooltiptext="&findCloseButton.tooltip;"
                    oncommand="close();"/>
                <xul:label anonid="find-label" class="findbar-find-fast" control="findbar-textbox"/>
                <xul:hbox anonid="find-field-container"
                    class="find-field-container findbar-find-fast">
                <xul:textbox class="findbar-textbox" anonid="findbar-textbox"/>
            </xul:hbox>
            <xul:hbox anonid="find-buttons-container" class="find-buttons-container">
                <xul:toolbarbutton anonid="find-next"
                    class="findbar-find-next tabbable"
                    label="&next.label;"
                    accesskey="&next.accesskey;"
                    tooltiptext="&next.tooltip;"
                    oncommand="onFindAgainCommand(false);"
                    disabled="true"
                    chromedir="&locale.dir;"
                    xbl:inherits="accesskey=findnextaccesskey"/>
                <xul:toolbarbutton anonid="find-previous"
                    class="findbar-find-previous tabbable"
                    label="&previous.label;"
                    accesskey="&previous.accesskey;"
                    tooltiptext="&previous.tooltip;"
                    oncommand="onFindAgainCommand(true);"
                    disabled="true"
                    chromedir="&locale.dir;"
                    xbl:inherits="accesskey=findpreviousaccesskey"/>
            </xul:hbox>
            <xul:toolbarbutton anonid="highlight"
                class="findbar-highlight tabbable"
                label="&highlight.label;"
                accesskey="&highlight.accesskey;"
                tooltiptext="&highlight.tooltiptext;"
                oncommand="toggleHighlight(this.checked);"
                type="checkbox"
                disabled="true"
                xbl:inherits="accesskey=highlightaccesskey"/>
            <xul:checkbox anonid="find-case-sensitive"
                oncommand="_setCaseSensitivity(this.checked);"
                label="&caseSensitiveCheckbox.label;"
                accesskey="&caseSensitiveCheckbox.accesskey;"
                xbl:inherits="accesskey=matchcaseaccesskey"/>
            <xul:checkbox anonid="findbar-similar"
                oncommand="_setSimilar(this.checked)"
                label="Similar"
                accesskey="s"
                xbl:inherits="accesskey=matchcaseaccesskey"/>
            <xul:textbox class="findbar-similar-level"
                anonid="findbar-similar-level"
                type="number"
                size="2"
                min="0" max="100"
                increment="5"
                value="80"
                disabled="true"/>
            <xul:label anonid="match-case-status" class="findbar-find-fast"/>
            <xul:image anonid="find-status-icon" class="findbar-find-fast find-status-icon"/>
            <xul:description anonid="find-status" class="findbar-find-fast findbar-find-status"
                control="findbar-textbox">
            </xul:description>
            </xul:hbox>
        </content>

    <implementation implements="nsIDOMEventListener">

        <method name="_setSimilar">
            <parameter name="aSimilar"/>
            <body><![CDATA[
                var prefsvc = Components.classes["@mozilla.org/preferences-service;1"]
                    .getService(Components.interfaces.nsIPrefBranch2);

                prefsvc.setBoolPref("extensions.smartfind.enabled",
                    aSimilar ? true : false);
            ]]></body>
        </method>

        <method name="onFindAgainCommand">
            <parameter name="aFindPrevious"/>
            <body><![CDATA[
                var findString = this._browser.fastFind.searchString || this._findField.value;
                if (!findString) {
                    this.startFind();
                    return;
                }

                var res;
                // Ensure the stored SearchString is in sync with what we want to find
                if (this._findField.value != this._browser.fastFind.searchString &&
                    !this.hidden)
                    res = this._find(this._findField.value);
                else
                    res = this._findAgain(aFindPrevious);

                if (res == this.nsITypeAheadFind.FIND_NOTFOUND) {
                    if (this.open()) {
                        if (this._findMode != this.FIND_NORMAL)
                            this._setFindCloseTimeout();
                        this._findField.focus();
                        this._findField.focus();
                        this._updateStatusUI(res, aFindPrevious);
                    }
                }
        ]]></body>
      </method>

    </implementation>

  </binding>
</bindings>
